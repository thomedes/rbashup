#! /bin/bash
##############################################################################
#
#   rbashup - rsync bash backup
#
    version=0.0.2
#
#   Author:      Toni Homedes i Saun
#   Copyright:   2013 Toni Homedes i Saun
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#   Release log:
#
#   v0.0.1 => The purging algorithm in v0.0.0 was plain wrong. I'm rewriting
#   it with a new idea, the "bucket filter" => done, not very happy about the
#   result, it works well but code should be cleaner
#
#   v0.0.2 => Fixed default values for normal user / super user (root).
#   Some refactoring.
#
#   TODO:
#
#       - Trap unexpected exit and cleanup()
#
#       - Improve purging algorithm. Still not very happy about it.
#
#       - Find someone who can test it on non Linux systems: Mac, BSD, AIX,
#         HP-UX, ...
#
##############################################################################

#-----------------------------------------------------------------------------
log() {
    local priority="$1" format="$2"; shift 2
    local now=$(date --rfc-3339=seconds)
    local msg="$(printf "%s %s: $format" "$now" "$priority" "$@")"

    if [[ -x ${opts[logger]} ]]; then
        ${opts[logger]} \
            -p "${opts[logger-facility]}.$priority" \
            -t rbashup "$msg"
    else if [[ -n ${opts[log-file]} ]]; then
        echo "$msg" >> "${opts[log-file]}"
    else
        case "$priority" in
            WARNING|ERROR)  echo "$msg" >&2 ;;
            *)              echo "$msg"     ;;
        esac
    fi fi
}

#-----------------------------------------------------------------------------
ERROR()   { log ERROR "$@"; kill -s TERM $TOP_PID ;}
WARNING() { log WARNING "$@"                      ;}
NOTICE()  { log NOTICE "$@"                       ;}
INFO()    { ((opt_v > 0)) && log INFO "$@"        ;}
DEBUG()   { ((opt_v > 1)) && log DEBUG "$@"       ;}

#-----------------------------------------------------------------------------
check_input_file() {
    (( $# == 2 )) || ERROR "Invalid call to %s()" "$FUNCNAME"
    local desc="$1"
    local file="$2"

    [[ -r "$file" ]] || ERROR "Non readable %s: \"%s\"" "$desc" "$file"
}

#-----------------------------------------------------------------------------
usage() {
    local s
    IFS='' read -r -d '' s <<EOF
Usage:
    rbashup [options] backup-set

    where options are:
        -V|--version        show version number and exit
        -c|--config file    use given config file
        -h|--help           show this message and exit
        -n                  Dry Run, don't actually do nothing
        -v                  verbose, use 1 or more times
EOF

    if [[ $# > 0 ]]; then
        local fmt="$1"; shift
        ERROR "$fmt\n\n%s" "$@" "$s"
    else
        echo "$s"
    fi
}

#-----------------------------------------------------------------------------
#
#   Compare two version strings
#
#   @param [in]     a           Version string to compare
#   @param [in]     b           Version string to compare
#
#   Usage:
#       version_cmp  1.2.3    4.5.6
#       version_cmp  1.5.6.7  1.5.6
#
#   @return -1, 0 or 1
#
#-----------------------------------------------------------------------------
version_cmp() {
    local a="$1" b="$2"
    local -i fa fb

    while true; do

        fa="${a%%.*}"
        fb="${b%%.*}"

        ((fa != fb)) && break

        a="${a#$fa}"; a="${a#.}"
        b="${b#$fb}"; b="${b#.}"

        if [[ -z $a && -z $b ]]; then
            echo 0
            return
        fi
    done
    ((fa > fb)) && echo 1 || echo -1
}

#-----------------------------------------------------------------------------
rsync_version() { rsync --version | awk 'NR==1 { print $3 }' ;}

#-----------------------------------------------------------------------------
#
#   receive a date in $date_format and return UNIX epoch seconds
#
#   @param  [in]    date        String to be parsed
#
#   @return UNIX epoch seconds for date
#
#-----------------------------------------------------------------------------
epoch() { date -d "${1:0:10} ${1:11:2}:${1:13}" +%s ;}

#-----------------------------------------------------------------------------
#
#   Read a whole INI section into a "variable" array
#
#   @param [out]    array       name of array to receive read values
#   @param [in]     file        File to read
#   @param [in]     section     Section to look at
#
#-----------------------------------------------------------------------------
ini_read_section() {
    (( $# == 3 )) || ERROR "Invalid call to %s()" "$FUNCNAME"

    local array="$1" file="$2" section="$3"
    local l k v

    check_input_file config "$file"

    #DEBUG "ini_read_section $array $file $section"

    for l in $(sed -n '/^[ \t]*\['"$section"'\]/,/\[/s/^[ \t]*\([^#; \t][^ \t=]*\).*=[ \t]*\(.*\)/\1=\2/p' $file)
    do
        k=${l%%=*}
        v=${l#*=}
        eval $array[$k]="$v"
    done
}

#-----------------------------------------------------------------------------
config_dump() {
    local k kk
    echo Config:
    for k in "${!opts[@]}"; do echo "$k"; done | sort | while read kk; do
        printf "%-20s ==> %s\n" "$kk" "${opts[$kk]}";
    done
}

#-----------------------------------------------------------------------------
backup() {
    (( $# == 4 )) || ERROR "Invalid call to %s()" "$FUNCNAME"

    local src="$1" dstbase="$2" now="$3" excludes="$4"
    shift 4

    DEBUG 'backup "%s" "%s" "%s" "%s"' "$src" "$dstbase" "$now" "$excludes"

    local \
        dstfull="$dstbase/$now" \
        latest="$dstbase/latest" \
        tmp="$dstbase/.in-progress"

    [[ -z $opt_n ]] && mkdir -p "$dstbase"

    if [[ -n $excludes ]]; then
        excludes=$(echo ",$excludes" | sed 's/[,]/ --exclude-from=/g')
    fi

    NOTICE "Backup \"$src\""
    NOTICE "    to \"$dstfull\""

    [[ -d "$dstfull" ]] && ERROR "Wait a minute!"

    if [[ -d "$latest" ]]; then
        local link="--link-dest=$latest/"
    else
        local link=
    fi

    [[ -z $opt_n ]] && rm -rf "$tmp" # just in case there was something left

    rsync $opt_n -a $excludes "$@" $link "$src/" "$tmp/" \
        && [[ -z $opt_n ]] \
        && mv "$tmp" "$dstfull" \
        && [[ -d "$latest" ]] && rm "$latest"
    [[ ! -d "$latest" && -d "$dstfull" ]] && ln -s "$now" "$latest"
}

#-----------------------------------------------------------------------------
purge() {
    (( $# == 2 )) || ERROR "Invalid call to %s()" "$FUNCNAME"

    local path="$1"
    local x y list
    local -i e i j period last_period n_periods now=$(epoch "$2")
    local -A backups

    NOTICE "Purging old backups..."

    ((now = now + 0 * 3600))

    # load an array with all existing backups
    list="$(find "$path" -mindepth 1 -maxdepth 1 -type d -name "$mask" |
            sort -r)"

    while read x; do backups["$x"]=0; DEBUG "%s" "$x"; done < <(echo "$list")

    # Mark first "keep-last" for keeping
    ((i = 0))
    while read x && ((i++ < ${opts[keep-last]})); do
        backups["$x"]=1;
    done < <(echo "$list")

    # Mark hourly
    n_periods=${opts[keep-hourly]}
    ((last_period = n_periods))
    while read x; do
        e=$(epoch $(basename "$x"))
        ((period = (now - e) / 3600))
        if ((period < last_period)); then
            ((last_period = period))
            backups["$x"]=1;
        fi
    done < <(echo "$list" | sort) # run from past to present

    # Mark daily
    n_periods=${opts[keep-daily]}
    ((last_period = n_periods))
    while read x; do
        e=$(epoch $(basename "$x"))
        ((period = (now - e) / 86400))
        if ((period < last_period)); then
            ((last_period = period))
            backups["$x"]=1;
        fi
    done < <(echo "$list" | sort) # run from past to present

    # Mark weekly
    n_periods=${opts[keep-weekly]}
    ((last_period = n_periods))
    while read x; do
        e=$(epoch $(basename "$x"))
        ((period = (now - e) / (7 * 86400) ))
        if ((period < last_period)); then
            ((last_period = period))
            backups["$x"]=1;
        fi
    done < <(echo "$list" | sort) # run from past to present

    # Mark monthly
    n_periods=${opts[keep-monthly]}
    ((last_period = n_periods))
    while read x; do
        e=$(epoch $(basename "$x"))
        ((period = (now - e) / (30 * 86400) ))
        if ((period < last_period)); then
            ((last_period = period))
            backups["$x"]=1;
        fi
    done < <(echo "$list" | sort) # run from past to present

    # Do the actual keeping or removing
    while read x; do
        #echo "$x => ${backups["$x"]}";
        if ((${backups["$x"]})); then
            INFO "Keeping  \"$x\""
        else
            NOTICE "Removing \"$x\""
            [[ -z $opt_n ]] && rm -rf "$x"
            true
        fi
    done < <(echo "$list")
}

#-----------------------------------------------------------------------------
load_config() {
    # Set default options

    if ((EUID == 0)); then  # super user ?
        opts[log-file]=/var/log/rbashup.log
        opts[lock-file]=/var/run/rbashup.pid
    else
        opts[log-file]=
        opts[lock-file]=/tmp/rbashup.pid
    fi

    check_input_file "config file" "$opt_config"

    ini_read_section opts "$opt_config"  global
    ini_read_section opts "$opt_config" "$opt_set"

    echo "${opts[excludes]}" | tr , "\n" |
        while read f; do
            [[ -n "$f" ]] && check_input_file excludes "$f"
        done

    DEBUG %s "$(config_dump)"
}

###############################################################################
##
##   M A I N
##
###############################################################################

# If you change date_format you have to change epoch() and $mask
# accordingly.

date_format=+%Y-%m-%d_%H%M%z
d=[0-9]
d2=$d$d
d4=$d2$d2
mask="${d4}-${d2}-${d2}_${d4}[+-]${d4}"

###########################################################################

export TOP_PID=$$
trap "exit 1" TERM
#
#   Do some checks
#
getopt -T > /dev/null
if [[ $? -ne 4 ]]; then
    ERROR "Invalid version of getopt. Enhanced GNU version required"
fi

if [[ $(version_cmp $(rsync_version) 2.5.7) -lt 0 ]]; then
    ERROR "Invalid version of rsync. 2.5.7 or more required"
fi

#trap 'ERROR "Error in line %s" "${LINENO}"' ERR

#
#   Parse options
#
opt_n=                  # dry run
opt_v=0                 # verbosity level
# configuration file: try ~/.rbashup and, if not, /etc/rbashup.cfg
opt_config=~/.rbashup
[[ -f $opt_config ]] || opt_config=/etc/rbashup.cfg

eval set -- $(getopt -n $(basename "$0") -o c:hnVv \
    -l config,help,version -- "$@")

while true; do
    case "$1" in
        -V|--version)   echo "$version"; exit 0;;
        -c|--config)    opt_config="$2"; shift;;
        -h|--help)      usage; exit 0;;
        -n)             opt_n="-n";;
        -v)             ((++opt_v));;
        --)             shift; break;;
        *)              ERROR "Undefined parameter '%s'" "$1"
    esac
    shift
done

(( $# < 1 )) && usage "Missing backup set name"
opt_set="$1"; shift

declare -A opts
load_config

now=$(date $date_format)

NOTICE "****** rbashup started (pid $$) ******"
NOTICE "****** backup-set: $opt_set ******"

#  Check if already running
[[ -f ${opts[lock-file]} ]] && lock_id=$(< ${opts[lock-file]}) || lock_id=0
if ((lock_id > 0)) && ps -p "$lock_id" > /dev/null; then
    ERROR "rbashup is already running (pid $lock_id)!"
fi
echo $$ > "${opts[lock-file]}"

[[ -n $opt_n ]] && NOTICE "DRY RUN"

# Do the backup

dstfull="${opts[dst]}/$now"
latest="${opts[dst]}/latest"

backup "${opts[src]}" "${opts[dst]}" "$now" "${opts[excludes]}"
purge "${opts[dst]}" "$now"
NOTICE "******* rbashup ended *******"
rm "${opts[lock-file]}"
